{"version":3,"sources":["TextHighlighter.tsx","index.tsx"],"names":["MyToggleButton","withStyles","root","backgroundColor","props","color","fontWeight","ToggleButton","TokenItem","this","token","style","onClick","dangerouslySetInnerHTML","__html","React","Component","TextHighlighter","render","token_spans","state","tokens","map","index","label","labels","args","colors","key","toString","handleChange","label_list","Object","keys","theme","ToggleButtonGroup","aria-label","value","current","onChange","setCurrent","exclusive","size","display_names","concat","bind","e","val","setState","prevState","item_index","new_labels","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gRAmBMA,EAAiBC,YAAW,CAC9BC,KAAM,CACFC,gBAAiB,SAACC,GAAD,OAAiBA,EAAMC,OACxC,iBAAkB,CACdA,MAAO,QACPC,WAAY,OACZH,gBAAiB,SAACC,GAAD,OAAiBA,EAAMC,UAN7BJ,CASpBM,KAEGC,E,4JACF,WAAU,IAAD,OACL,GAAwB,WAApBC,KAAKL,MAAMM,MAAoB,CAC/B,IAAMC,EAAQ,CAAER,gBAAiBM,KAAKL,MAAMC,OAC5C,OAAO,0BAAMO,QAAS,kBAAM,EAAKR,MAAMQ,WAAWD,MAAOA,EACrDE,wBAAyB,CAAEC,OAAO,GAAD,OAAKL,KAAKL,MAAMM,MAAhB,QAKrC,OAAO,iC,GAVKK,IAAMC,WAmBxBC,E,kDACF,WAAYb,GAAa,IAAD,8BACpB,cAAMA,IAMHc,OAAS,WACZ,IAAIC,EAAc,EAAKC,MAAMC,OAAOC,KAAI,SAACZ,EAAOa,GAC5C,IAAMC,EAAQ,EAAKJ,MAAMK,OAAOF,GAEhC,OAAO,kBAAC,EAAD,CACHlB,MAAO,EAAKD,MAAMsB,KAAKC,OAAOH,GAC9Bd,MAAOA,EACPc,MAAOA,EACPI,IAAKL,EAAMM,WACXjB,QAAS,kBAAM,EAAKkB,aAAaP,SAIrCQ,EAAU,YAAOC,OAAOC,KAAK,EAAK7B,MAAMsB,KAAKC,SACjD,OACI,yBAAKhB,MAAO,EAAKP,MAAM8B,OACnB,6BACI,kBAACC,EAAA,EAAD,CAAmBC,aAAW,gBAAgBC,MAAO,EAAKjB,MAAMkB,QAASC,SAAU,EAAKC,WAAYC,WAAS,EAACC,KAAK,SAE3GX,EAAWT,KAAI,SAACE,EAAOD,GACnB,IAAMlB,EAAQ,EAAKD,MAAMsB,KAAKC,OAAOH,GACrC,OAAO,kBAACxB,EAAD,CACHqC,MAAOb,EACPY,aAAYZ,EACZI,IAAKJ,EACLnB,MAAOA,GAAQ,EAAKD,MAAMsB,KAAKiB,cAAcnB,OAClDoB,OACC,CAAC,kBAAC5C,EAAD,CAAgBqC,MAAM,OAAOD,aAAW,OAAO/B,MAAM,SAArD,YAKjB,6BACKc,KAtCb,EAAKC,MAAQ,CAAEC,OAAQjB,EAAMsB,KAAKL,OAAQI,OAAQrB,EAAMsB,KAAKD,OAAQa,QAAS,QAC9E,EAAKR,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAJE,E,8CA8CxB,SAAWC,EAAQC,GACXA,GACAtC,KAAKuC,UACD,SAAAC,GACI,MAAO,CAAEX,QAASS,EAAK1B,OAAQ4B,EAAU5B,OAAQI,OAAQwB,EAAUxB,a,0BAMnF,SAAayB,GAAqB,IAAD,OACH,QAAtBzC,KAAKW,MAAMkB,SACX7B,KAAKuC,UACD,SAACC,EAAW7C,GACR,IAAM+C,EAAaF,EAAUxB,OAAOH,KAAI,SAACE,EAAOD,GAC5C,OAAQA,GAAS2B,EAAcD,EAAUX,QAAUd,KAGvD,MAAO,CACHH,OAAQ4B,EAAU5B,OAClBI,OAAQ0B,EACRb,QAASW,EAAUX,YAG3B,kBAAMc,IAAUC,kBAAkB,CAAE,OAAU,EAAKjC,MAAMK,gB,GAvE3C6B,KA6EfC,cAAwBtC,GC1HvCuC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.70ef2713.chunk.js","sourcesContent":["import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport { withStyles } from '@material-ui/core/styles';\n\n\ninterface State {\n    tokens: string[]\n    labels: string[]\n    current: string\n}\n\nconst MyToggleButton = withStyles({\n    root: {\n        backgroundColor: (props: any) => (props.color),\n        \"&.Mui-selected\": {\n            color: \"black\",\n            fontWeight: \"bold\",\n            backgroundColor: (props: any) => (props.color),\n        }\n    }\n})(ToggleButton)\n\nclass TokenItem extends React.Component<any, any> {\n    render() {\n        if (this.props.token != \"$break$\") {\n            const style = { backgroundColor: this.props.color }\n            return <span onClick={() => this.props.onClick()} style={style}\n                dangerouslySetInnerHTML={{ __html: `${this.props.token} ` }}\n            >\n            </span>;\n        }\n        else {\n            return <br />\n        }\n    }\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass TextHighlighter extends StreamlitComponentBase<State> {\n    constructor(props: any) {\n        super(props);\n        this.state = { tokens: props.args.tokens, labels: props.args.labels, current: \"None\" };\n        this.handleChange = this.handleChange.bind(this);\n        this.setCurrent = this.setCurrent.bind(this);\n    }\n\n    public render = (): ReactNode => {\n        let token_spans = this.state.tokens.map((token, index) => {\n            const label = this.state.labels[index];\n\n            return <TokenItem\n                color={this.props.args.colors[label]}\n                token={token}\n                label={label}\n                key={index.toString()}\n                onClick={() => this.handleChange(index)}\n            />\n        })\n\n        let label_list = [...Object.keys(this.props.args.colors)];\n        return (\n            <div style={this.props.theme}>\n                <div>\n                    <ToggleButtonGroup aria-label=\"label-classes\" value={this.state.current} onChange={this.setCurrent} exclusive size=\"small\">\n                        {\n                            label_list.map((label, index) => {\n                                const color = this.props.args.colors[label];\n                                return <MyToggleButton\n                                    value={label}\n                                    aria-label={label}\n                                    key={label}\n                                    color={color}>{this.props.args.display_names[label]}</MyToggleButton>\n                            }).concat(\n                                [<MyToggleButton value=\"None\" aria-label=\"None\" color=\"white\">None</MyToggleButton>]\n                            )\n                        }\n                    </ToggleButtonGroup>\n                </div>\n                <div>\n                    {token_spans}\n                </div>\n            </div>\n        )\n    }\n\n    setCurrent(e: any, val: string) {\n        if (val) {\n            this.setState(\n                prevState => {\n                    return { current: val, tokens: prevState.tokens, labels: prevState.labels }\n                }\n            )\n        }\n    }\n\n    handleChange(item_index: number) {\n        if (this.state.current != \"None\") {\n            this.setState(\n                (prevState, props) => {\n                    const new_labels = prevState.labels.map((label, index) => {\n                        return (index == item_index) ? prevState.current : label;\n                    });\n\n                    return {\n                        tokens: prevState.tokens,\n                        labels: new_labels,\n                        current: prevState.current\n                    }\n                },\n                () => Streamlit.setComponentValue({ \"labels\": this.state.labels })\n            );\n        }\n    }\n}\n\nexport default withStreamlitConnection(TextHighlighter)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TextHighlighter from \"./TextHighlighter\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextHighlighter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}